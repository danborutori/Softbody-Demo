var hahaApp,__awaiter=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))(function(a,i){function r(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){e.done?a(e.value):new n(function(t){t(e.value)}).then(r,s)}l((o=o.apply(e,t||[])).next())})};!function(e){const t=new Ammo.btTransform,n=new Ammo.btVector3,o=new Ammo.btQuaternion(1,0,0,0),a=new THREE.Matrix4,i=new THREE.Matrix4,r=new THREE.Vector3,s=new THREE.Quaternion,l=new THREE.Quaternion;e.Object=class{constructor(e,i,l,d){this.mass=e,this.collisionShape=i,this.object3D=l,this.object3D.updateMatrixWorld(),r.setFromMatrixPosition(this.object3D.matrixWorld),s.setFromRotationMatrix(a.extractRotation(this.object3D.matrixWorld)),n.setValue(r.x,r.y,r.z),o.setValue(s.x,s.y,s.z,s.w),t.setOrigin(n),t.setRotation(o);const h=new Ammo.btDefaultMotionState(t);d||0==e||(i.calculateLocalInertia(e,n),d=n);const c=new Ammo.btRigidBodyConstructionInfo(e,h,i,0!=e?d:void 0);this.motionState=h,this.rigidBody=new Ammo.btRigidBody(c),0==e&&this.rigidBody.setCollisionFlags(1)}update(e){this.sync()}sync(){if(0!=this.mass){this.motionState.getWorldTransform(t);const e=t.getRotation(),n=t.getOrigin();r.set(n.x(),n.y(),n.z()),s.set(e.x(),e.y(),e.z(),e.w()),this.object3D.parent&&(a.copy(this.object3D.parent.matrixWorld).invert(),l.setFromRotationMatrix(i.extractRotation(a)),s.premultiply(l),r.applyMatrix4(a)),this.object3D.quaternion.copy(s),this.object3D.position.copy(r)}}updateRigidBodyTransform(){r.setFromMatrixPosition(this.object3D.matrixWorld),s.setFromRotationMatrix(a.extractRotation(this.object3D.matrixWorld)),n.setValue(r.x,r.y,r.z),o.setValue(s.x,s.y,s.z,s.w),t.setOrigin(n),t.setRotation(o),this.rigidBody.setWorldTransform(t),this.motionState.setWorldTransform(t)}}}(hahaApp||(hahaApp={})),function(e){const t=1e-4,n=new THREE.Vector3,o=new THREE.Vector3;function a(e){return`${Math.round(e.x/t)},${Math.round(e.y/t)},${Math.round(e.z/t)}`}e.SoftBody=class{constructor(e,o,i){this.soundCooldown=1,this.geometry=o;const r=function(e){const o=e.clone();for(let e in o.attributes)switch(e){case"position":break;default:o.deleteAttribute(e)}const i=THREE.BufferGeometryUtils.mergeVertices(o,t),r=i.attributes.position,s=i.index,l=new Map;for(let e=0;e<r.count;e++)n.fromBufferAttribute(r,e),l.set(a(n),e);const d=e.attributes.position,h=new Array(d.count);for(let e=0;e<d.count;e++)n.fromBufferAttribute(d,e),h[e]=l.get(a(n));return{position:Array.from(r.array),index:Array.from(s.array),mapping:h}}(o),s=new Ammo.btSoftBodyHelpers;this.softbody=s.CreateFromTriMesh(e,r.position,r.index,r.index.length/3,!0),this.softbody.m_cfg.kPR=5,this.softbody.m_cfg.viterations=10,this.softbody.m_cfg.piterations=10,this.softbody.setTotalMass(.1,!0),this.softbody.getCollisionShape().setMargin(.05),this.mapping=r.mapping,Ammo.destroy(s),this.mesh=new THREE.Mesh(o,i)}onDeform(e,t,n){t>.2&&this.soundCooldown<=0&&(e.audio.playSoundByIndex(this.softbody.getUserIndex()),this.soundCooldown=.5)}update(e,t){this.soundCooldown-=t;const n=this.geometry.attributes.position,a=this.geometry.attributes.normal,i=n.count,r=new THREE.Vector3,s=new THREE.Vector3;let l=0,d=0;o.set(0,0,0);for(let e=0;e<i;e++){const t=this.softbody.m_nodes.at(this.mapping[e]),i=t.m_x,h=t.m_n;r.fromBufferAttribute(n,e),s.set(i.x(),i.y(),i.z());const c=r.distanceTo(s);l=Math.max(l,c),d+=c,o.addScaledVector(s,c),s.toArray(n.array,3*e),a.setXYZ(e,h.x(),h.y(),h.z())}o.divideScalar(d),n.needsUpdate=!0,a.needsUpdate=!0,this.onDeform(e,l,o)}}}(hahaApp||(hahaApp={})),function(e){const t=new THREE.Vector2,n=new THREE.Vector2,o=new THREE.Vector3,a=(new THREE.Vector4,new THREE.Vector2(1,-1)),i=new THREE.Matrix4,r=(new THREE.Matrix4,new Ammo.btVector3),s=new Ammo.btTransform;e.layerDefault=0,e.layerOutline=1;class l extends e.Object{update(e){super.update(e),this.object3D.rotateY(Math.PI*e/10),this.object3D.updateMatrixWorld(),this.updateRigidBodyTransform()}}function d(e){e.traverse(e=>{if(e.isMesh){const t=e.material;if(t instanceof THREE.MeshStandardMaterial){for(let e of[t.map,t.normalMap,t.roughnessMap,t.metalnessMap])e&&16!=e.anisotropy&&(e.anisotropy=16,e.needsUpdate=!0);t.side==THREE.DoubleSide&&(t.side=THREE.FrontSide,t.needsUpdate=!0)}}})}e.setAnisotropic=d;e.App=class{constructor(t){this.canvas=t,this.hud=new e.HUD,this.loadingBar=new e.LoadingBar,this.dummyEnvMap=new THREE.CubeTexture,this.updateEnvMapCooldown=0,this.objects=[],this.softBodies=[],this.passes=new Map,this.timeElapsed=0,this.mousePressed=!1,this.pointerMove=new THREE.Vector2,this.pointerPosition=new THREE.Vector2,this.clock=new THREE.Clock,this.fpsCounter=0,this.running=!0,this.player=new e.Player,this.audio=new e.AudioManager,this.contacts=new WeakMap;let n=t.getBoundingClientRect();t.width=n.width,t.height=n.height;const o=t.getContext("webgl2",{});this.renderer=new THREE.WebGLRenderer({context:o}),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=THREE.PCFSoftShadowMap,this.renderer.setSize(n.width,n.height),this.renderer.setClearColor("#0000ff"),this.effectComposer=new THREE.EffectComposer(this.renderer),this.effectComposer.renderTarget1.depthTexture=new THREE.DepthTexture(n.width,n.height),this.effectComposer.renderTarget2.depthTexture=new THREE.DepthTexture(n.width,n.height),this.scene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(50,n.width/n.height),this.camera.layers.set(e.layerDefault),this.camera.layers.enable(e.layerOutline),this.envCamera=new THREE.CubeCamera(.1,10,new THREE.WebGLCubeRenderTarget(256,{format:THREE.RGBAFormat,type:THREE.UnsignedByteType,depthBuffer:!0,generateMipmaps:!0,minFilter:THREE.LinearMipMapLinearFilter,magFilter:THREE.LinearFilter,anisotropy:16})),this.envCamera.layers.set(e.layerDefault),this.envCamera.position.set(0,5,0),this.scene.environment=this.envCamera.renderTarget.texture,this.scene.add(this.envCamera),this.scene.add(new e.OutlinePlane);const a=new THREE.RenderPass(this.scene,this.camera);this.effectComposer.addPass(a);const i=new e.DofPass(this.camera,{focus:5,maxblur:.005,aperture:.0025});this.effectComposer.addPass(i);const r=new THREE.SMAAPass(n.width,n.height);this.effectComposer.addPass(r);const s=new THREE.UnrealBloomPass(new THREE.Vector2(n.width,n.height),.2);this.effectComposer.addPass(s),this.passes.set("smaa",r),this.passes.set("dof",i),this.passes.set("bloom",s),t.addEventListener("mousedown",e=>{this.onMouseDown(e)}),t.addEventListener("mouseup",e=>{this.onMouseUp(e)}),t.addEventListener("mousemove",e=>{this.onMouseMove(e)}),t.addEventListener("touchstart",e=>{this.onTouchStart(e)}),t.addEventListener("touchmove",e=>{this.onTouchMove(e)}),t.addEventListener("touchend",e=>{this.onTouchEnd(e)}),t.addEventListener("touchcancel",e=>{}),document.body.appendChild(this.hud.domElement),document.body.appendChild(this.loadingBar.htmlElement),document.body.appendChild((new e.InfoPanel).htmlElement),document.addEventListener("visibilitychange",e=>{switch(document.visibilityState){case"visible":this.running=!0,this.clock.start();break;case"hidden":this.running=!1,this.clock.stop()}})}init(){this.setupAmmo(),this.setupScene();const t=this.loadingBar.startLoading();return e.Player.init().then(()=>t.end()),window.addEventListener("resize",()=>{this.onResize()}),this.hud.numObjects=this.objects.length,this}start(){let e=!1;return setInterval(()=>{if(this.running){const t=Math.min(this.clock.getDelta(),1/30);this.updateLoop(t),e||(e=!0,requestAnimationFrame(()=>{e=!1,this.render(),this.fpsCounter+=1}))}},5),setInterval(()=>{this.hud.fps=this.fpsCounter,this.fpsCounter=0},1e3),this}setupScene(){this.scene.add(this.camera),this.scene.add(this.player.object3D);const t=new THREE.TextureLoader,n=this.loadingBar.startLoading();Promise.all([new Promise((e,n)=>t.load("./textures/dirty_concrete_1k_jpg/dirty_concrete_diff_1k.jpg",t=>e(t),void 0,e=>n(e))),new Promise((e,n)=>t.load("./textures/dirty_concrete_1k_jpg/dirty_concrete_nor_1k.jpg",t=>e(t),void 0,e=>n(e))),new Promise((e,n)=>t.load("./textures/dirty_concrete_1k_jpg/dirty_concrete_rough_1k.jpg",t=>e(t),void 0,e=>n(e)))]).then(e=>{n.end();const t=e[0],o=e[1],i=e[2];e.forEach(e=>{e.anisotropy=16,e.needsUpdate=!0}),a.map=t,a.normalMap=o,a.normalMapType=THREE.TangentSpaceNormalMap,a.roughnessMap=i,a.needsUpdate=!0});const a=new THREE.MeshStandardMaterial({metalness:0,side:THREE.BackSide}),i=new THREE.Mesh(new THREE.BoxBufferGeometry(10,10,10),a);i.position.set(0,5,0),i.castShadow=!1,i.receiveShadow=!0,this.scene.add(i),r.setValue(5,5,5);const l=new Ammo.btCompoundShape;s.setIdentity(),r.setValue(0,-5.5,0),s.setOrigin(r),r.setValue(5,.5,5),l.addChildShape(s,new Ammo.btBoxShape(r)),s.setIdentity(),r.setValue(0,5.5,0),s.setOrigin(r),r.setValue(5,.5,5),l.addChildShape(s,new Ammo.btBoxShape(r)),s.setIdentity(),r.setValue(5.5,0,0),s.setOrigin(r),r.setValue(.5,5,5),l.addChildShape(s,new Ammo.btBoxShape(r)),s.setIdentity(),r.setValue(-5.5,0,0),s.setOrigin(r),r.setValue(.5,5,5),l.addChildShape(s,new Ammo.btBoxShape(r)),s.setIdentity(),r.setValue(0,0,-5.5),s.setOrigin(r),r.setValue(5,5,.5),l.addChildShape(s,new Ammo.btBoxShape(r)),s.setIdentity(),r.setValue(0,0,5.5),s.setOrigin(r),r.setValue(5,5,.5),l.addChildShape(s,new Ammo.btBoxShape(r));const h=new e.Object(0,l,i);this.world.addRigidBody(h.rigidBody,1,4294967295),this.objects.push(h),this.camera.position.set(0,2,0),this.camera.up.set(0,1,0),this.player.object3D.add(this.camera);const c=new THREE.SpotLight(new THREE.Color(.9,.9,.9));c.angle=Math.PI/8,c.penumbra=.2,c.shadow.mapSize.set(1024,1024),c.shadow.camera.fov=c.angle,c.target=new THREE.Object3D,c.castShadow=!0,this.scene.add(c),this.light=c;const u=new THREE.AmbientLight(new THREE.Color(.2,.2,.2));this.scene.add(u),this.scene.fog=new THREE.Fog(0,5,12),this.setupTargets();const m=this.loadingBar.startLoading();(new THREE.GLTFLoader).load("./models/corgishiba_texturing_challenge/scene.gltf",t=>{m.end();const n=t.scene;d(n);let a=0;n.traverse(t=>{if(t.isMesh){if(1==a){const n=t.geometry;n.computeBoundingSphere(),o.copy(n.boundingSphere.center).negate();const a=1/n.boundingSphere.radius;n.translate(o.x,o.y,o.z).scale(a,a,a).rotateY(Math.PI);const i=t.material;i.side=THREE.FrontSide,i.depthWrite=!0,i.needsUpdate=!0,this.setupSoftBody(n,i,new THREE.Vector3(0,1,-2)).softbody.setUserIndex(e.AudioIndex.ar)}a++}})}),this.addHangingBall(),this.addGrass()}setupAmmo(){const e=new Ammo.btSoftBodyRigidBodyCollisionConfiguration,t=new Ammo.btCollisionDispatcher(e),n=new Ammo.btDbvtBroadphase,o=new Ammo.btSequentialImpulseConstraintSolver,a=new Ammo.btDefaultSoftBodySolver,i=new Ammo.btSoftRigidDynamicsWorld(t,n,o,e,a);this.world=i}setupTargets(){const t=[new THREE.Vector3(0,0,0),new THREE.Vector3(-.5,0,1),new THREE.Vector3(.5,0,1),new THREE.Vector3(-1,0,2),new THREE.Vector3(0,0,2),new THREE.Vector3(1,0,2),new THREE.Vector3(-1.5,0,3),new THREE.Vector3(-.5,0,3),new THREE.Vector3(.5,0,3),new THREE.Vector3(1.5,0,3),new THREE.Vector3(-2,0,4),new THREE.Vector3(-1,0,4),new THREE.Vector3(0,0,4),new THREE.Vector3(1,0,4),new THREE.Vector3(2,0,4)],n=this.loadingBar.startLoading();(new THREE.GLTFLoader).load("./models/bottle_old_wine/scene.gltf",a=>{n.end();const i=a.scene;d(i);const r=i.getObjectByName("bottle_05L_1_03_-_Default_0");let s=r.geometry;s.rotateX(-Math.PI/2),s.computeBoundingBox(),s.boundingBox.getCenter(o),s.translate(-o.x,-o.y,-o.z),s.boundingBox.getSize(o);const l=.4/o.x;s.scale(l,l,l),s.computeBoundingBox();const h=r.material,c=e.btConvexHullShapeFromGeometry(s),u=new Ammo.btVector3;c.calculateLocalInertia(1,u);const m=s.boundingBox.getSize(o).y;t.forEach(e=>{e.add(new THREE.Vector3(0,.5,-2.5)).multiply(new THREE.Vector3(.96,m,.8))});for(let n of t){const t=new THREE.Mesh(s,h);t.castShadow=!0,t.receiveShadow=!0,t.position.copy(n),this.scene.add(t);const o=new e.Object(1,c,t,u);o.rigidBody.setUserIndex(e.AudioIndex.bottlelHit),this.world.addRigidBody(o.rigidBody,1,-1),this.objects.push(o)}Ammo.destroy(u)})}setupSoftBody(t,n,o,a=e.SoftBody){const i=new a(this.world.getWorldInfo(),t.clone().translate(o.x,o.y,o.z),n);return i.mesh.receiveShadow=!0,i.mesh.castShadow=!0,this.scene.add(i.mesh),this.world.addSoftBody(i.softbody,1,-1),this.softBodies.push(i),i}addHangingBall(){const t=this.loadingBar.startLoading();(new THREE.GLTFLoader).load("./models/wood_stick_04/scene.gltf",n=>{t.end();const a=n.scene;d(a);const i=a.getObjectByName("wood_stick_04_wood_stick_04_0"),s=i.geometry;s.rotateY(Math.PI/2),s.computeBoundingBox(),s.boundingBox.getCenter(o),s.translate(-o.x,-o.y,-o.z),s.boundingBox.getSize(o);const h=.4/o.y;s.scale(h,h,h),s.computeBoundingBox();const c=new THREE.Mesh(s,i.material);c.receiveShadow=!0,c.castShadow=!0,c.position.set(0,2,0),this.scene.add(c),s.boundingBox.getSize(o),r.setValue(o.x/2,o.y/2,o.z/2);const u=new Ammo.btCylinderShapeX(r),m=new l(0,u,c);this.world.addRigidBody(m.rigidBody,1,-1),this.objects.push(m);const p=new THREE.MeshPhysicalMaterial({metalness:0,clearcoat:1}),f=this.loadingBar.startLoading(),E=this.loadingBar.startLoading(),g=this.loadingBar.startLoading(),y=new THREE.TextureLoader;y.load("./textures/fabric_leather_01_1k_jpg/fabric_leather_01_diff_1k.jpg",e=>{f.end(),p.map=e,p.needsUpdate=!0}),y.load("./textures/fabric_leather_01_1k_jpg/fabric_leather_01_nor_1k.jpg",e=>{E.end(),p.normalMap=e,p.normalMapType=THREE.TangentSpaceNormalMap,p.clearcoatNormalMap=e,p.needsUpdate=!0}),y.load("./textures/fabric_leather_01_1k_jpg/fabric_leather_01_rough_1k.jpg",e=>{g.end(),p.roughnessMap=e,p.needsUpdate=!0});for(let t=0;t<3;t++){const n=new THREE.SphereBufferGeometry(.5,16,16),o=this.setupSoftBody(n,p,new THREE.Vector3(t-1,1.5),e.HangingBall);o.softbody.getCollisionShape().setMargin(.1),o.softbody.setUserIndex(e.AudioIndex.punch);for(let e=0;e<o.softbody.m_nodes.size();e++){const t=o.softbody.m_nodes.at(e);Math.abs(t.m_x.y()-2)<1e-4&&o.softbody.appendAnchor(e,m.rigidBody,!0,1)}}d(this.scene)})}addWater(){const t=new e.WaterPlane;t.position.set(0,.1,0),this.scene.add(t)}addGrass(){THREE.MathUtils.seededRandom(.93738);const t=(new THREE.Matrix4).makeRotationX(-Math.PI/2).premultiply(i.makeScale(.005,.005,.005)),n=new Array(100);for(let e=0;e<n.length;e++){const o=1*THREE.MathUtils.seededRandom()+.2;n[e]=(new THREE.Matrix4).copy(t).premultiply(i.makeScale(1,o,1)).premultiply(i.makeRotationY(THREE.MathUtils.seededRandom()*Math.PI*2)).premultiply(i.makeTranslation(5*(2*THREE.MathUtils.seededRandom()-1),0,5*(2*THREE.MathUtils.seededRandom()-1)))}const o=this.loadingBar.startLoading();(new THREE.GLTFLoader).load("./models/clover_grass/scene.gltf",t=>{o.end(),t.scene.traverse(t=>{if(t.isMesh){const o=e.GrassWinding.modify(t.material),a=new THREE.InstancedMesh(t.geometry,o,n.length);a.customDepthMaterial=a.customDistanceMaterial=e.GrassWinding.modify(new THREE.MeshDepthMaterial({map:t.material.map,alphaTest:t.material.alphaTest,depthPacking:THREE.RGBADepthPacking})),a.castShadow=!0,a.receiveShadow=!0;for(let e=0;e<n.length;e++)a.setMatrixAt(e,n[e]);this.scene.add(a)}})})}setupPassControl(){const e=document.createElement("div");e.style.position="absolute",e.style.right="0",e.style.top="0",e.style.backgroundColor="white",e.innerHTML="<div>Pass:</div>";for(let t of this.passes){const n=t[0],o=t[1],a=document.createElement("div"),i=document.createElement("input");i.type="checkbox",i.checked=o.enabled,i.onchange=(e=>{o.enabled=e.target.checked}),a.innerHTML=`${n}`,a.appendChild(i),e.appendChild(a)}document.body.appendChild(e)}updateLoop(e){this.timeElapsed+=e;const t=2*Math.PI*this.timeElapsed/10;this.light.position.set(10*-Math.cos(t),20,10*Math.sin(t)),this.player.update(this,e),this.world.stepSimulation(e,Math.floor(60*e)),this.traceContact();for(let t of this.objects)t.update(e);for(let t of this.softBodies)t.update(this,e);this.pointerMove.set(0,0)}traceContact(){const e=this.world.getDispatcher(),t=e.getNumManifolds();for(let n=0;n<t;n++){const t=e.getManifoldByIndexInternal(n),o=t.getNumContacts(),a=t.getBody0(),i=t.getBody1();let r=0;for(let e=0;e<o;e++)r+=t.getContactPoint(e).getAppliedImpulse();0!=o&&(r/=o);for(let e of[{a:a,b:i},{a:i,b:a}]){const t=this.contacts.get(e.a)||new WeakMap;t.get(e.b)!=o&&(t.set(e.b,o),this.contacts.set(e.a,t),r>1&&this.audio.playSoundByIndex(e.a.getUserIndex()))}}}render(){this.updateEnvMapCooldown<=0?(this.scene.environment=this.dummyEnvMap,this.envCamera.update(this.renderer,this.scene),this.scene.environment=this.envCamera.renderTarget.texture,this.updateEnvMapCooldown=4):this.updateEnvMapCooldown--,this.effectComposer.render(1/60)}onMouseDown(e){this.mousePressed=!0;const t=e.target.getBoundingClientRect();n.set(t.width,t.height),this.pointerPosition.set(e.offsetX,e.offsetY).divide(n).multiplyScalar(2).addScalar(-1).multiply(a)}onMouseUp(e){this.mousePressed=!1,this.pointerMove.set(0,0)}onMouseMove(e){const o=e.target.getBoundingClientRect();n.set(o.width,o.height),this.pointerPosition.set(e.offsetX,e.offsetY).divide(n).multiplyScalar(2).addScalar(-1).multiply(a),this.mousePressed&&(t.set(e.movementX,e.movementY).divideScalar(n.y).multiply(a),this.pointerMove.add(t))}onTouchStart(e){this.mousePressed=!0;const t=e.target.getBoundingClientRect();n.set(t.width,t.height);for(let t of e.touches)this.pointerPosition.set(t.clientX,t.clientY).divide(n).multiplyScalar(2).addScalar(-1).multiply(a)}onTouchMove(e){const t=e.target.getBoundingClientRect();n.set(t.width,t.height);for(let t of e.touches)this.pointerPosition.set(t.clientY,t.clientY).divide(n).multiplyScalar(2).addScalar(-1).multiply(a)}onTouchEnd(e){this.mousePressed=!1,this.pointerMove.set(0,0)}onResize(){const e=this.canvas.getBoundingClientRect();this.canvas.width=e.width,this.canvas.height=e.height,this.renderer.setSize(e.width,e.height),this.renderer.setViewport(0,0,e.width,e.height),this.camera.aspect=e.width/e.height,this.camera.updateProjectionMatrix(),this.effectComposer.setSize(e.width,e.height)}}}(hahaApp||(hahaApp={})),function(e){class t{}t.baseballHit=1,t.bottlelHit=2,t.punch=3,t.ar=4,t.star=5,e.AudioIndex=t;e.AudioManager=class{constructor(){this.context=new AudioContext,this.audioBuffers={};const e=this.context.createGain();e.gain.setValueAtTime(.05,0),e.connect(this.context.destination),this.outputNode=e;const t={throw:"./sound/419341__wizardoz__swoosh.ogg",baseballHit:"./sound/516974__plucinskicasey__normalpunch.wav",bottlelHit:"./sound/178660__hanbaal__bottle-tink2.wav",punch:"./sound/81042__rock-savage__blood-hitting-window.wav",ar:"./sound/ar.mp3",star:"./sound/522159__magnuswaker__gutsy-spillage-1.wav"};for(let e in t){const n=e;this.createBuffer(t[n]).then(e=>{this.audioBuffers[n]=e})}}get rootNode(){return this.outputNode}playSound(e){const t=this.context.createBufferSource();t.buffer=this.audioBuffers[e],t.connect(this.rootNode),t.start()}playSoundByIndex(e){switch(e){case t.baseballHit:this.playSound("baseballHit");break;case t.bottlelHit:this.playSound("bottlelHit");break;case t.punch:this.playSound("punch");break;case t.ar:this.playSound("ar");break;case t.star:this.playSound("star")}}createBuffer(e){return __awaiter(this,void 0,void 0,function*(){const t=yield(yield fetch(e)).arrayBuffer();return this.context.decodeAudioData(t)})}}}(hahaApp||(hahaApp={})),function(e){const t=new Ammo.btVector3;e.btConvexHullShapeFromGeometry=function(e){const n=new THREE.ConvexHull;n.setFromObject(new THREE.Mesh(e));const o=new Ammo.btConvexHullShape,a=n.faces;for(let e=0;e<a.length;e++){const n=a[e];let i=n.edge;do{const e=i.head().point;t.setValue(e.x,e.y,e.z),o.addPoint(t),i=i.next}while(i!==n.edge)}return o.setMargin(.005),o}}(hahaApp||(hahaApp={})),function(e){e.config={version:"1.0.5",author:"ANMCダンボールとり",projectUrl:"https://github.com/danborutori/Softbody-Demo"}}(hahaApp||(hahaApp={})),function(e){const t=new THREE.Vector2,n=[new THREE.Vector2(1,1).multiplyScalar(5e-4),new THREE.Vector2(0,1).multiplyScalar(5e-4),new THREE.Vector2(-1,1).multiplyScalar(5e-4),new THREE.Vector2(1,0).multiplyScalar(5e-4),new THREE.Vector2(-1,0).multiplyScalar(5e-4),new THREE.Vector2(1,-1).multiplyScalar(5e-4),new THREE.Vector2(0,-1).multiplyScalar(5e-4),new THREE.Vector2(-1,-1).multiplyScalar(5e-4)];e.OutlinePlane=class extends THREE.Mesh{constructor(){super(new THREE.PlaneBufferGeometry(2,2),new THREE.ShaderMaterial({defines:{SAMPLE_OFFSET_LEN:n.length,PI:Math.PI},uniforms:{tColor:{value:null},tDepth:{value:null},tNormal:{value:null},clipNear:{value:0},clipFar:{value:0},aspectRatio:{value:1},sampleOffsets:{value:n}},vertexShader:"\n                        varying vec2 vUv;\n\n                        void main(){\n                            vUv = uv;\n                            gl_Position = vec4(position, 1);\n                        }\n                    ",fragmentShader:"\n                        #include <packing>\n\n                        uniform sampler2D tColor;\n                        uniform sampler2D tDepth;\n                        uniform sampler2D tNormal;\n                        uniform float clipNear;\n                        uniform float clipFar;\n                        uniform float aspectRatio;\n                        uniform vec2 sampleOffsets[SAMPLE_OFFSET_LEN];\n\n                        varying vec2 vUv;\n\n                        void main(){\n                            float depth = texture2D(tDepth, vUv).r;\n                            vec3 normal = texture2D(tNormal, vUv).xyz*2.0-1.0;\n                            float viewZ = perspectiveDepthToViewZ(depth, clipNear, clipFar);\n                            float depthDiff = 0.0;\n                            float maxNormalAngle = 0.0;\n                            vec2 colorUv = vUv;\n                            float closestZ = 1.0;\n\n                            for( int i=0; i<SAMPLE_OFFSET_LEN; i++){\n                                vec2 uv = vUv+sampleOffsets[i]*vec2(aspectRatio, 1.0);\n                                float d = texture2D(tDepth, uv).r;\n                                vec3 n = texture2D(tNormal, uv).xyz*2.0-1.0;\n                                float vz = perspectiveDepthToViewZ(d, clipNear, clipFar);\n                                depthDiff += abs( viewZ-vz );\n                                maxNormalAngle = max( maxNormalAngle, acos(dot(normal,n)) );\n\n                                if( d<closestZ ){\n                                    closestZ = d;\n                                    colorUv = uv;\n                                }\n                            }\n                            depthDiff /= float(SAMPLE_OFFSET_LEN);\n\n                            float opacity = clamp((depthDiff-0.1)/0.01,0.0,1.0); // depth edge\n                            opacity += clamp((maxNormalAngle-60.0*PI/180.0)/0.01,0.0,1.0); // normal edge\n                            vec3 lineColor = texture2D( tColor, colorUv ).rgb;\n                            lineColor = (lineColor-0.5)*1.5+0.5;\n                            gl_FragColor = vec4(lineColor, opacity);\n                        }\n                    ",transparent:!0,depthTest:!1,depthWrite:!1,blending:THREE.NormalBlending})),this.depthRenderTarget=new THREE.WebGLRenderTarget(1024,1024,{format:THREE.RedFormat,type:THREE.FloatType,generateMipmaps:!1,depthBuffer:!1,stencilBuffer:!1}),this.normalRenderTarget=new THREE.WebGLRenderTarget(1024,1024,{format:THREE.RGBAFormat,type:THREE.UnsignedByteType,generateMipmaps:!1,depthBuffer:!1,stencilBuffer:!1}),this.colorRenderTarget=new THREE.WebGLRenderTarget(512,512,{format:THREE.RGBAFormat,type:THREE.UnsignedByteType,generateMipmaps:!1,depthBuffer:!1,stencilBuffer:!1}),this.copyMaterial=new THREE.ShaderMaterial({uniforms:{tDiffuse:{value:null}},vertexShader:"\n                varying vec2 vUv;\n\n                void main(){\n                    vUv = uv;\n                    gl_Position = vec4(position, 1);\n                }\n            ",fragmentShader:"\n                uniform sampler2D tDiffuse;\n\n                varying vec2 vUv;\n\n                void main(){\n\n                    gl_FragColor = texture2D( tDiffuse, vUv );\n\n                }\n            "}),this.depthToNormalMaterial=new THREE.ShaderMaterial({uniforms:{tDepth:{value:null},resolution:{value:new THREE.Vector2},projectMatrixInv:{value:new THREE.Matrix4}},vertexShader:"\n                void main(){\n                    gl_Position = vec4(position, 1);\n                }\n            ",fragmentShader:"\n                #include <packing>\n\n                uniform sampler2D tDepth;                \n                uniform vec2 resolution;\n                uniform mat4 projectMatrixInv;\n\n                void main(){\n                    vec2 uv = gl_FragCoord.xy/resolution;\n                    vec2 uvx = (gl_FragCoord.xy+vec2(1,0))/resolution;\n                    vec2 uvy = (gl_FragCoord.xy+vec2(0,1))/resolution;\n                    float depth = texture2D( tDepth, uv ).r;\n                    float depthx = texture2D( tDepth, uvx ).r;\n                    float depthy = texture2D( tDepth, uvy ).r;\n\n                    vec4 pt =  projectMatrixInv*(vec4( uv, depth, 1 )*2.0-1.0);\n                    vec4 ptx =  projectMatrixInv*(vec4( uvx, depthx, 1 )*2.0-1.0);\n                    vec4 pty =  projectMatrixInv*(vec4( uvy, depthy, 1 )*2.0-1.0);\n\n                    pt /= pt.w;\n                    ptx /= ptx.w;\n                    pty /= pty.w;\n\n                    vec3 normal = normalize( cross( ptx.xyz-pt.xyz, pty.xyz-pt.xyz ) ) * 0.5+0.5;\n\n                    gl_FragColor = vec4(normal, 1);                    \n                }\n            "}),this.fsQuad=new THREE.Pass.FullScreenQuad,this.renderOrder=1,this.frustumCulled=!1,this.material.uniforms.tColor.value=this.colorRenderTarget.texture,this.material.uniforms.tDepth.value=this.depthRenderTarget.texture,this.material.uniforms.tNormal.value=this.normalRenderTarget.texture,this.layers.set(e.layerOutline),this.onBeforeRender=((e,n,o)=>{const a={renderTarget:e.getRenderTarget()};e.getDrawingBufferSize(t),this.depthRenderTarget.width==t.x&&this.depthRenderTarget.height==t.y||(this.depthRenderTarget.setSize(t.x,t.y),this.normalRenderTarget.setSize(t.x,t.y)),this.fsQuad.material=this.copyMaterial,this.copyMaterial.uniforms.tDiffuse.value=a.renderTarget.depthTexture,e.setRenderTarget(this.depthRenderTarget),this.fsQuad.render(e),this.copyMaterial.uniforms.tDiffuse.value=a.renderTarget.texture,e.setRenderTarget(this.colorRenderTarget),this.fsQuad.render(e),this.depthToNormalMaterial.uniforms.tDepth.value=a.renderTarget.depthTexture,this.depthToNormalMaterial.uniforms.resolution.value.copy(t),this.depthToNormalMaterial.uniforms.projectMatrixInv.value.copy(o.projectionMatrixInverse),this.fsQuad.material=this.depthToNormalMaterial,e.setRenderTarget(this.normalRenderTarget),this.fsQuad.render(e),this.material.uniforms.clipNear.value=o.near,this.material.uniforms.clipFar.value=o.far,this.material.uniforms.aspectRatio.value=o.aspect,e.setRenderTarget(a.renderTarget)})}}}(hahaApp||(hahaApp={})),function(e){e.DofPass=class extends THREE.Pass{constructor(e,t){super();const n=void 0!==t.focus?t.focus:1,o=void 0!==t.aspect?t.aspect:e.aspect,a=void 0!==t.aperture?t.aperture:.025,i=void 0!==t.maxblur?t.maxblur:1;this.camera=e;const r=THREE.BokehShader,s=THREE.UniformsUtils.clone(r.uniforms);s.focus.value=n,s.aspect.value=o,s.aperture.value=a,s.maxblur.value=i,s.nearClip.value=e.near,s.farClip.value=e.far,this.materialBokeh=new THREE.ShaderMaterial({defines:window.Object.assign({},r.defines),uniforms:s,vertexShader:r.vertexShader,fragmentShader:r.fragmentShader}),this.materialBokeh.defines.DEPTH_PACKING="0",this.uniforms=s,this.needsSwap=!0,this.fsQuad=new THREE.Pass.FullScreenQuad(this.materialBokeh)}render(e,t,n){this.uniforms.tDepth.value=n.depthTexture,this.uniforms.tColor.value=n.texture,this.uniforms.nearClip.value=this.camera.near,this.uniforms.farClip.value=this.camera.far,this.renderToScreen?e.setRenderTarget(null):(e.setRenderTarget(t),e.clear()),this.fsQuad.render(e)}}}(hahaApp||(hahaApp={})),function(e){const t={value:performance.now()/1e3};setInterval(()=>{t.value+=1/60},1e3/60);e.GrassWinding=class{static modify(e){(e.defines||(e.defines={})).GRASS_WINDING="1";const n=e.onBeforeCompile;return e.onBeforeCompile=((e,o)=>{n(e,o),e.uniforms.grassWindTime=t,e.vertexShader="\n                    uniform float grassWindTime;\n                "+e.vertexShader.replace("#include <project_vertex>","\n                    #include <project_vertex>\n\n                    float phaseX = ( mvPosition.x + grassWindTime/3.0 ) * PI * 2.0;\n                    float phaseZ = ( mvPosition.z + grassWindTime/3.0 ) * PI * 2.0;\n                    float str = mvPosition.y*0.01;\n                    mvPosition.x += cos( phaseX )*str;\n                    mvPosition.z -= sin( phaseZ )*str;\n\n                    gl_Position = projectionMatrix * mvPosition;\n                    ")}),e}}}(hahaApp||(hahaApp={})),function(e){e.HangingBall=class extends e.SoftBody{constructor(e,t,n){super(e,t,n),this.hp=10}update(e,t){super.update(e,t),this.hp>0&&(this.hp=Math.min(10,this.hp+1*t))}onDeform(e,t,n){this.hp>0&&super.onDeform(e,t,n),t>.2&&this.hp>0&&(this.hp-=t,this.hp<=0&&this.onDie(e,n))}onDie(t,n){this.softbody.m_cfg.kPR=0,t.audio.playSound("star"),e.Stars.explodStar(t,n.clone())}}}(hahaApp||(hahaApp={})),function(e){e.HUD=class{constructor(){this._fps=0,this._numObjects=0,this.domElement=document.createElement("div"),this.domElement.style.position="absolute",this.domElement.style.left="10",this.domElement.style.top="10",this.domElement.style.userSelect="none"}set fps(e){this._fps=e,this.update()}set numObjects(e){this._numObjects=e,this.update()}update(){this.domElement.innerHTML=`<font color="white">FPS: ${this._fps}</font>`}}}(hahaApp||(hahaApp={})),function(e){e.InfoPanel=class{constructor(){const t=document.createElement("div");t.style.position="absolute",t.style.top="4px",t.style.right="4px",t.style.borderRadius="4px",t.style.padding="8px",t.style.backgroundColor="white",t.style.fontFamily="Arial, Helvetica, sans-serif",t.style.userSelect="none",t.style.textAlign="right",t.innerHTML=`\n            ⓘ<br/>\n            <div name="content">\n            <table>\n            <tr>\n            <td><b>Version:</b></td>\n            <td>${e.config.version}</td>\n            </tr>\n            <tr>\n            <td><b>Author:</b></td>\n            <td>${e.config.author}}</td>\n            </tr>\n            <tr>\n            <td><b>Source Code:</b></td>\n            <td><a name="link">${e.config.projectUrl}</a></td>\n            </tr>\n            </table>\n            </div>\n            `,this.htmlElement=t,this.content=t.querySelector("div[name=content]"),t.addEventListener("mousedown",e=>{this.onPress()}),t.addEventListener("touchstart",e=>{this.onPress()}),t.querySelector("a[name=link]").addEventListener("mousedown",e=>{open("https://github.com/danborutori/Softbody-Demo","new"),e.stopPropagation()}),this.onPress()}onPress(){this.content.parentElement===this.htmlElement?this.htmlElement.removeChild(this.content):this.htmlElement.appendChild(this.content)}}}(hahaApp||(hahaApp={})),function(e){e.LoadingBar=class{constructor(){this.loadingCount=0;const e=document.createElement("div");e.style.backgroundColor="white",e.style.position="absolute",e.style.top="50%",e.style.left="50%",e.style.transform="translate(-50%, -50%)",e.style.padding="8px",e.style.fontFamily="Arial, Helvetica, sans-serif",e.style.borderRadius="4px",e.style.visibility="hidden",e.style.userSelect="none",e.innerHTML="Loading...",this.htmlElement=e}startLoading(){return this.loadingCount++,this.htmlElement.style.visibility="visible",{end:()=>{0==--this.loadingCount&&(this.htmlElement.style.visibility="hidden")}}}}}(hahaApp||(hahaApp={})),function(e){const t=.02,n=.2,o=1,a=30;let i;const r=new Ammo.btSphereShape(n),s=new Ammo.btVector3;r.calculateLocalInertia(o,s);const l=new THREE.Matrix4,d=new THREE.Matrix4,h=new THREE.Vector3,c=new THREE.Vector4,u=new Ammo.btVector3;e.Player=class{constructor(){this.object3D=new THREE.Object3D,this.fireBallCooldown=0,this.circling={angle:0,distance:5}}static init(){return __awaiter(this,void 0,void 0,function*(){return new Promise((t,o)=>{(new THREE.GLTFLoader).load("./models/worn_baseball_ball/scene.gltf",o=>{const a=o.scene;e.setAnisotropic(a);const r=a.getObjectByName("polySurface5_lambert1_0"),s=r.material,l=r.geometry;l.computeBoundingSphere(),h.copy(l.boundingSphere.center).negate();const d=n/l.boundingSphere.radius;l.translate(h.x,h.y,h.z).scale(d,d,d),i={material:s,geometry:l},t()},void 0,o)})})}update(e,t){this.movement(e,t),this.firingBalls(e,t)}movement(e,t){this.object3D.position.set(Math.sin(this.circling.angle)*this.circling.distance,0,-Math.cos(this.circling.angle)*this.circling.distance),e.camera.lookAt(0,0,0)}firingBalls(e,n){this.fireBallCooldown-=n,e.mousePressed&&this.fireBallCooldown<0&&(this.fireBall(e),this.fireBallCooldown=t)}fireBall(t){if(null==i)return;l.multiplyMatrices(t.camera.projectionMatrix,t.camera.matrixWorldInverse),d.copy(l).invert(),c.set(t.pointerPosition.x,t.pointerPosition.y,0,1),c.applyMatrix4(d),c.divideScalar(c.w);const n=new THREE.Mesh(i.geometry,i.material);n.castShadow=!0,n.receiveShadow=!0,n.position.set(c.x,c.y,c.z),n.quaternion.set(Math.random(),Math.random(),Math.random(),Math.random()).normalize(),t.scene.add(n);const m=new e.Object(o,r,n,s);h.setFromMatrixPosition(t.camera.matrixWorld).sub(n.position).multiplyScalar(-1),h.x+=.01*Math.random(),h.y+=.01*Math.random(),h.z+=.01*Math.random(),h.normalize().multiplyScalar(a),u.setValue(h.x,h.y,h.z),m.rigidBody.setLinearVelocity(u),m.rigidBody.setUserIndex(e.AudioIndex.baseballHit),t.world.addRigidBody(m.rigidBody,1,-1),t.objects.push(m),t.hud.numObjects=t.objects.length,t.audio.playSound("throw")}}}(hahaApp||(hahaApp={})),function(e){const t=6,n=new THREE.Matrix4,o=new THREE.Matrix4,a=new THREE.Quaternion,i=new Ammo.btVector3,r=new Ammo.btTransform,s=new Promise((t,n)=>(new THREE.GLTFLoader).load("./models/gold_star/scene.gltf",n=>{const o=n.scene.getObjectByName("Star_Gold_0"),a=o.geometry;a.computeBoundingBox();const i=a.boundingBox.getCenter(new THREE.Vector3),r=a.boundingBox.getSize(new THREE.Vector3),s=new THREE.Vector3(.8,.8,.4).divide(r);a.translate(-i.x,-i.y,-i.z).scale(s.x,s.y,s.z),a.computeBoundingBox();const l=e.btConvexHullShapeFromGeometry(a),d=new Ammo.btVector3;l.calculateLocalInertia(1,d),t({geometry:o.geometry,material:o.material,collisionShape:l,localInteria:d})},void 0,n));class l extends e.Object{constructor(e,t,n,o,a,i){super(n,o,a,i),this.instancedMesh=e,this.index=t}sync(){this.motionState.getWorldTransform(r);const e=r.getOrigin(),t=r.getRotation();n.makeRotationFromQuaternion(a.set(t.x(),t.y(),t.z(),t.w())).premultiply(o.makeTranslation(e.x(),e.y(),e.z())),this.instancedMesh.setMatrixAt(this.index,n),this.instancedMesh.instanceMatrix.needsUpdate=!0}}e.Stars=class{static explodStar(e,o){return __awaiter(this,void 0,void 0,function*(){const a=yield s,r=new THREE.InstancedMesh(a.geometry,a.material,t);for(let s=0;s<t;s++){const t=new THREE.Object3D;t.position.copy(o),t.quaternion.set(2*Math.random()-1,2*Math.random()-1,2*Math.random()-1,2*Math.random()-1).normalize();const d=new l(r,s,1,a.collisionShape,t,a.localInteria),h=5;i.setX((2*Math.random()-1)*h),i.setY((2*Math.random()-1)*h),i.setZ((2*Math.random()-1)*h),d.rigidBody.setLinearVelocity(i);const c=5;i.setX((2*Math.random()-1)*c),i.setY((2*Math.random()-1)*c),i.setZ((2*Math.random()-1)*c),d.rigidBody.setAngularVelocity(i),e.world.addRigidBody(d.rigidBody),e.objects.push(d),n.makeTranslation(o.x,o.y,o.z),r.setMatrixAt(s,n)}e.scene.add(r)})}}}(hahaApp||(hahaApp={})),function(e){const t=new THREE.Vector2(0,0),n=new THREE.Matrix4,o=new THREE.Vector2;THREE.ShaderChunk.quaternion="\n\n        vec4 quaternionFromUnitVectors( vec3 vFrom, vec3 vTo ){\n            // assumes direction vectors vFrom and vTo are normalized\n\n            vec4 q;\n\n            float EPS = 0.000001;\n\n            float r = dot(vFrom, vTo ) + 1.0;\n\n            if ( r < EPS ) {\n\n                r = 0.0;\n\n                if ( abs( vFrom.x ) > abs( vFrom.z ) ) {\n\n                    q.x = - vFrom.y;\n                    q.y = vFrom.x;\n                    q.z = 0.0;\n                    q.w = r;\n\n                } else {\n\n                    q.x = 0.0;\n                    q.y = - vFrom.z;\n                    q.z = vFrom.y;\n                    q.w = r;\n\n                }\n\n            } else {\n\n                // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n                q.x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n                q.y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n                q.z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n                q.w = r;\n\n            }\n\n            return normalize(q);\n\n        }\n\n        vec3 applyQuaternion( vec3 v, vec4 q ){\n            vec3 result;\n            \n            float x = v.x, y = v.y, z = v.z;\n            float qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n    \n            // calculate quat * vector\n    \n            float ix = qw * x + qy * z - qz * y;\n            float iy = qw * y + qz * x - qx * z;\n            float iz = qw * z + qx * y - qy * x;\n            float iw = - qx * x - qy * y - qz * z;\n    \n            // calculate result * inverse quat\n    \n            result.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n            result.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n            result.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n    \n            return result;\n        }\n\n    ";class a extends THREE.MeshStandardMaterial{constructor(){super({transparent:!0,blending:THREE.NoBlending}),this.uniforms={tFramebuffer:{value:null},framebufferSize:{value:new THREE.Vector2(0,0)},waterTransforms:{value:[new THREE.Matrix4,new THREE.Matrix4,new THREE.Matrix4]},time:{value:0}},(this.defines||(this.defines={})).WATER_TRANSFORM_COUNT=this.uniforms.waterTransforms.value.length.toString();const e=this.onBeforeCompile;this.onBeforeCompile=((t,n)=>{e(t,n),t.uniforms.tFramebuffer=this.uniforms.tFramebuffer,t.uniforms.framebufferSize=this.uniforms.framebufferSize,t.uniforms.waterTransforms=this.uniforms.waterTransforms,t.uniforms.time=this.uniforms.time,t.vertexShader="\n                    uniform float time;\n                "+t.vertexShader.replace("#include <project_vertex>","\n\n                    float phase = PI*2.0*(transformed.x/2.0+time);\n                    transformed.y += (cos( phase ) - sin(  phase ))*0.01;\n\n                    #include <project_vertex>\n                    "),t.fragmentShader="\n                    #include <quaternion>\n\n                    uniform sampler2D tFramebuffer;\n                    uniform vec2 framebufferSize;\n                    uniform mat4 waterTransforms[WATER_TRANSFORM_COUNT];\n                "+t.fragmentShader.replace("#include <normal_fragment_maps>","\n                    #ifdef USE_UV\n                    vec3 n = vec3(0,0,0);\n                    for( int i=0; i<WATER_TRANSFORM_COUNT; i++  ){\n                        vec2 uv = (waterTransforms[i]*vec4(vUv,0,1)).xy;\n                        n += texture2D( normalMap, uv ).rgb*2.0-1.0;\n                    }\n                    n = normalize( n );\n\n                    vec4 q = quaternionFromUnitVectors( vec3(0,0,1),  normal );\n                    normal = applyQuaternion( n, q );\n                    #endif\n                    ").replace("#include <dithering_fragment>","\n                    #include <dithering_fragment>\n\n                    vec2 framebufferUV = gl_FragCoord.xy/framebufferSize;\n\n                    vec2 offset = normalize(refract( normalize(-vViewPosition), normal, 1.0/1.33 )).xy*0.01;\n\n                    framebufferUV += offset;\n                    vec4 framebufferColor = texture2D( tFramebuffer, framebufferUV );\n\n                    gl_FragColor.rgb = mix( gl_FragColor.rgb, framebufferColor.xyz, 0.9 );\n\n                    ")}),(new THREE.TextureLoader).load("./textures/9110-normal.jpg",e=>{e.wrapS=THREE.RepeatWrapping,e.wrapT=THREE.RepeatWrapping,e.anisotropy=16,e.generateMipmaps=!0,e.minFilter=THREE.LinearMipMapLinearFilter,e.magFilter=THREE.LinearFilter,e.needsUpdate=!0,this.normalMap=e,this.needsUpdate=!0})}}e.WaterPlane=class extends THREE.Mesh{constructor(){const e=new THREE.Vector2(0,0);let i;const r=new a;super(new THREE.PlaneBufferGeometry(10,10,50,50).rotateX(-Math.PI/2),r),this.onBeforeRender=((a,s,l)=>{a.getDrawingBufferSize(o),(e.x<o.x||e.y<o.y)&&(e.x=THREE.Math.ceilPowerOfTwo(o.x),e.y=THREE.Math.ceilPowerOfTwo(o.y),(i=new THREE.DataTexture(null,e.x,e.y,THREE.RGBAFormat,THREE.UnsignedByteType,THREE.UVMapping,THREE.ClampToEdgeWrapping,THREE.ClampToEdgeWrapping,THREE.LinearFilter,THREE.LinearFilter,16)).needsUpdate=!0,r.uniforms.tFramebuffer.value=i,r.uniforms.framebufferSize.value.copy(e)),(0,a.copyFramebufferToTexture)(t,i);const d=r.uniforms.waterTransforms.value;for(let e=0;e<d.length;e++)d[e].makeTranslation(.5*performance.now()/1e3,0,0).multiply(n.makeRotationZ(e*Math.PI*4/3)).multiply(n.makeScale(5,5,5));r.uniforms.time.value=performance.now()/1e3}),this.receiveShadow=!0,this.castShadow=!1}}}(hahaApp||(hahaApp={}));